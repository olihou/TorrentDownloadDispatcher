// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do one of these:
//
//    using RDTorrentDownloader.Models.RealDebrid;
//
//    var torrentAdd = TorrentAdd.FromJson(jsonString);
//    var download = Download.FromJson(jsonString);
//    var torrentInfo = TorrentInfo.FromJson(jsonString);
//    var torrent = Torrent.FromJson(jsonString);
//    var link = Link.FromJson(jsonString);
//    var user = User.FromJson(jsonString);
//    var hosts = Hosts.FromJson(jsonString);

namespace Infrastructure.TorrentHttpConverter.RealDebrid
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class TorrentAdd
    {
        [JsonProperty("id")]
        public string Id { get; set; }

        [JsonProperty("uri")]
        public Uri Uri { get; set; }
    }

    public partial class Link
    {
        [JsonProperty("id")]
        public string Id { get; set; }

        [JsonProperty("filename")]
        public string Filename { get; set; }

        [JsonProperty("filesize")]
        public long Filesize { get; set; }

        [JsonProperty("link")]
        public Uri LinkLink { get; set; }

        [JsonProperty("host")]
        public Host Host { get; set; }

        [JsonProperty("host_icon")]
        public Uri HostIcon { get; set; }

        [JsonProperty("chunks")]
        public long Chunks { get; set; }

        [JsonProperty("download")]
        public Uri Download { get; set; }

        [JsonProperty("streamable")]
        public long Streamable { get; set; }

        [JsonProperty("generated", NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? Generated { get; set; }

        [JsonProperty("crc", NullValueHandling = NullValueHandling.Ignore)]
        public long? Crc { get; set; }
    }

    public partial class Torrent
    {
        [JsonProperty("id")]
        public string Id { get; set; }

        [JsonProperty("filename")]
        public string Filename { get; set; }

        [JsonProperty("original_filename", NullValueHandling = NullValueHandling.Ignore)]
        public string OriginalFilename { get; set; }

        [JsonProperty("hash")]
        public string Hash { get; set; }

        [JsonProperty("bytes")]
        public long Bytes { get; set; }

        [JsonProperty("original_bytes", NullValueHandling = NullValueHandling.Ignore)]
        public long? OriginalBytes { get; set; }

        [JsonProperty("host")]
        public Host Host { get; set; }

        [JsonProperty("split")]
        public long Split { get; set; }

        [JsonProperty("progress")]
        public long Progress { get; set; }

        [JsonProperty("status")]
        public string Status { get; set; }

        [JsonProperty("added")]
        public DateTimeOffset Added { get; set; }

        [JsonProperty("files", NullValueHandling = NullValueHandling.Ignore)]
        public List<File> Files { get; set; }

        [JsonProperty("links")]
        public List<Uri> Links { get; set; }

        [JsonProperty("ended")]
        public DateTimeOffset Ended { get; set; }
    }

    public partial class File
    {
        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("path")]
        public string Path { get; set; }

        [JsonProperty("bytes")]
        public long Bytes { get; set; }

        [JsonProperty("selected")]
        public long Selected { get; set; }
    }

    public partial class User
    {
        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("username")]
        public string Username { get; set; }

        [JsonProperty("email")]
        public string Email { get; set; }

        [JsonProperty("points")]
        public long Points { get; set; }

        [JsonProperty("locale")]
        public string Locale { get; set; }

        [JsonProperty("avatar")]
        public Uri Avatar { get; set; }

        [JsonProperty("type")]
        public string Type { get; set; }

        [JsonProperty("premium")]
        public long Premium { get; set; }

        [JsonProperty("expiration")]
        public DateTimeOffset Expiration { get; set; }
    }

    public partial class Hosts
    {
        [JsonProperty("id")]
        public string Id { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("image")]
        public Uri Image { get; set; }

        [JsonProperty("image_big")]
        public Uri ImageBig { get; set; }
    }

    public enum Host { RealDebridCom };

    public enum MimeType { VideoMp4, VideoXMatroska };

    public partial class TorrentAdd
    {
        public static TorrentAdd FromJson(string json) => JsonConvert.DeserializeObject<TorrentAdd>(json, Converter.Settings);
    }

    public partial class Download
    {
        public static List<Link> FromJson(string json) => JsonConvert.DeserializeObject<List<Link>>(json, Converter.Settings);
    }

    public partial class TorrentInfo
    {
        public static Torrent FromJson(string json) => JsonConvert.DeserializeObject<Torrent>(json, Converter.Settings);
    }

    public partial class Torrent
    {
        public static List<Torrent> FromJson(string json) => JsonConvert.DeserializeObject<List<Torrent>>(json, Converter.Settings);
    }

    public partial class Link
    {
        public static Link FromJson(string json) => JsonConvert.DeserializeObject<Link>(json, Converter.Settings);
    }

    public partial class User
    {
        public static User FromJson(string json) => JsonConvert.DeserializeObject<User>(json, Converter.Settings);
    }

    public partial class Hosts
    {
        public static Dictionary<string, Hosts> FromJson(string json) => JsonConvert.DeserializeObject<Dictionary<string, Hosts>>(json, Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this TorrentAdd self) => JsonConvert.SerializeObject(self, Converter.Settings);
        public static string ToJson(this List<Link> self) => JsonConvert.SerializeObject(self, Converter.Settings);
        public static string ToJson(this Torrent self) => JsonConvert.SerializeObject(self, Converter.Settings);
        public static string ToJson(this List<Torrent> self) => JsonConvert.SerializeObject(self, Converter.Settings);
        public static string ToJson(this Link self) => JsonConvert.SerializeObject(self, Converter.Settings);
        public static string ToJson(this User self) => JsonConvert.SerializeObject(self, Converter.Settings);
        public static string ToJson(this Dictionary<string, Hosts> self) => JsonConvert.SerializeObject(self, Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                HostConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class HostConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Host) || t == typeof(Host?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "real-debrid.com")
            {
                return Host.RealDebridCom;
            }
            throw new Exception("Cannot unmarshal type Host");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Host)untypedValue;
            if (value == Host.RealDebridCom)
            {
                serializer.Serialize(writer, "real-debrid.com");
                return;
            }
            throw new Exception("Cannot marshal type Host");
        }

        public static readonly HostConverter Singleton = new HostConverter();
    }
}
